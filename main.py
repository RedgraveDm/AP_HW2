import os
import logging
import sys
import datetime
import re
import requests
import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, StateFilter
import matplotlib.pyplot as plt


YANDEX_CLOUD_CAT_ID = os.getenv("YANDEX_CLOUD_CAT_ID")
YANDEX_KEY_ID = os.getenv("YANDEX_KEY_ID")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")

OPEN_WEATHER_API_KEY = os.getenv("OPEN_WEATHER_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not all([YANDEX_CLOUD_CAT_ID, YANDEX_KEY_ID, YANDEX_API_KEY, OPEN_WEATHER_API_KEY, BOT_TOKEN]):
    raise ValueError("Check environment variables")


class UserProfile(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()
    gender = State()
    calorie_goal = State()


def generate_text(prompt, iam_token, folder_id, model_name="yandexgpt-lite", temperature=0.6, max_tokens=2000):
    url = f"https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    model_uri = f"gpt://{folder_id}/{model_name}"

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {iam_token}"
    }

    payload = {
        "modelUri": model_uri,
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": str(max_tokens)
        },
        "messages": [
            {
                "role": "user",
                "text": prompt
            }
        ]
    }

    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 200:
        try:
            result = response.json()
            print(result["result"]["alternatives"][0]["message"]["text"])
            return result["result"]["alternatives"][0]["message"]["text"]
        except KeyError:
            raise ValueError("Unexpected response format")
    else:
        raise Exception(f"Error: {response.status_code}, {response.text}")


def extract_average_number(text):
    match_range = re.search(r'(\d+)\s*[\-‚Äì‚Äî‚àí]\s*(\d+)', text)
    match_single = re.search(r'\b\d+\b', text)

    if match_range:
        num1, num2 = map(int, match_range.groups())
        return (num1 + num2) // 2 if num1 >= 0 and num2 >= 0 else None

    if match_single:
        num = int(match_single.group())
        return num if num >= 0 else None

    return None


def get_geolocation(city, api_key):
    url = f'http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={api_key}'
    response = requests.get(url)
    if response.status_code == 401:
        return {"error": "Invalid API key"}
    response.raise_for_status()
    response_data = response.json()
    if response_data:
        return {"lat": response_data[0]["lat"], "lon": response_data[0]["lon"]}
    return {"error": "City not found"}


def get_current_temp(lat, lon, api_key):
    url = f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&units=metric'
    response = requests.get(url)
    if response.status_code == 401:
        return {"error": "Invalid API key"}
    response.raise_for_status()
    data = response.json()
    return data["main"]["temp"]


def get_declension(value, forms):
    value = abs(value)
    if 11 <= value % 100 <= 19:
        return forms[2]
    last_digit = value % 10
    if last_digit == 1:
        return forms[0]
    if 2 <= last_digit <= 4:
        return forms[1]
    return forms[2]


bot = Bot(token=BOT_TOKEN)
dispatcher = Dispatcher(storage=MemoryStorage())
router = Router()
dispatcher.include_router(router)

users = {}

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%b %d %I:%M:%S %p",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logging.getLogger("aiogram").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


async def reset_logs():
    while True:
        now = datetime.datetime.now()
        reset_time = datetime.datetime.combine(now.date(), datetime.time(0, 0)) + datetime.timedelta(days=1)
        sleep_seconds = (reset_time - now).total_seconds()
        await asyncio.sleep(sleep_seconds)

        for user_id in users:
            users[user_id]["logged_water"] = 0
            users[user_id]["logged_calories"] = 0
            users[user_id]["burned_calories"] = 0
            users[user_id]["additional_water_goal"] = 0
            logger.info(f'ID{user_id} -- Reset stats')


def plot_progress(user_id):
    user = users[user_id]
    weight = user["weight"]
    activity = user["activity"]
    city = user["city"]

    logged_water = user.get("logged_water", 0)

    geo = get_geolocation(city, OPEN_WEATHER_API_KEY)
    if 'error' in geo:
        temp = 20
    else:
        temp = get_current_temp(geo["lat"], geo["lon"], OPEN_WEATHER_API_KEY) or 20

    water_goal = (user.get("additional_water_goal", 0) +
                  weight * 30 + (500 * (activity // 30)))
    if temp > 25:
        water_goal += 500
    if temp > 30:
        water_goal += 1000

    fig, axes = plt.subplots(1, 2, figsize=(10, 5))
    axes[0].bar(["–í—ã–ø–∏—Ç–æ", "–¶–µ–ª—å"], [logged_water, water_goal], color=["blue", "gray"])
    axes[0].set_title("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ")
    axes[0].set_ylabel("–º–ª")

    logged_calories = user.get("logged_calories", 0)
    burned_calories = user.get("burned_calories", 0)

    calorie_goal = user.get("calorie_goal", None)
    if calorie_goal is None:
        if user['gender'] == "–º":
            calorie_goal = int(10 * weight + 6.25 * user['height'] - 5 * user['age'] + 5)
        else:
            calorie_goal = int(10 * weight + 6.25 * user['height'] - 5 * user['age'] - 161)
    calorie_balance = logged_calories - burned_calories

    axes[1].bar(["–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ", "–°–æ–∂–∂–µ–Ω–æ", "–ë–∞–ª–∞–Ω—Å", "–¶–µ–ª—å"],
                [logged_calories, burned_calories, calorie_balance, calorie_goal],
                color=["orange", "red", "green", "blue"])
    axes[1].set_title("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
    axes[1].set_ylabel("–∫–∫–∞–ª")

    if not os.path.isdir('graphs'):
        os.mkdir('graphs')

    plt.tight_layout()
    file_path = f"graphs/progress_{user_id}.png"
    plt.savefig(file_path)
    plt.close()
    return file_path


@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        logger.info(f'ID{user_id} -- Bot started!')
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π!\n"
                             "–ù–∞–ø–∏—à–∏ /set_profile, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    logger.info(f'ID{user_id} -- Received: {message.text}')
    user = users[user_id]
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π!\n\n"
                         f"üìä **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n"
                         f"–í–µ—Å: {user['weight']} –∫–≥\n"
                         f"–†–æ—Å—Ç: {user['height']} —Å–º\n"
                         f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']} {get_declension(user['age'], ['–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç'])}\n"
                         f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['activity']} –º–∏–Ω/–¥–µ–Ω—å\n"
                         f"–ì–æ—Ä–æ–¥: {user['city']}\n"
                         f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user['gender'] == '–º' else '–ñ–µ–Ω—Å–∫–∏–π'}\n" +
                         (f"–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {user['calorie_goal']} –∫–∫–∞–ª/–¥–µ–Ω—å"
                          if 'calorie_goal' in user else ''),
                         parse_mode="Markdown")


@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(UserProfile.weight)


@router.message(UserProfile.weight)
async def process_weight(message: Message, state: FSMContext):
    weight = message.text
    if not weight.isdigit() or int(weight) <= 0:
        await message.answer("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(weight=int(weight))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(UserProfile.height)


@router.message(UserProfile.height)
async def process_height(message: Message, state: FSMContext):
    height = message.text
    if not height.isdigit() or int(height) <= 0:
        await message.answer("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(height=int(height))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(UserProfile.age)


@router.message(UserProfile.age)
async def process_age(message: Message, state: FSMContext):
    age = message.text
    if not age.isdigit() or int(age) <= 0:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(age=int(age))
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(UserProfile.activity)


@router.message(UserProfile.activity)
async def process_activity(message: Message, state: FSMContext):
    activity = message.text
    if not activity.isdigit() or int(activity) < 0:
        await message.answer("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(activity=int(activity))
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(UserProfile.city)


@router.message(UserProfile.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    geo = get_geolocation(city, OPEN_WEATHER_API_KEY)
    if 'error' in geo:
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: ' + geo['error'])
        return
    await state.update_data(city=city)
    await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª? (–º/–∂)")
    await state.set_state(UserProfile.gender)


@router.message(UserProfile.gender)
async def process_gender(message: Message, state: FSMContext):
    gender = message.text.lower()
    if gender not in ["–º", "–∂"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ '–º' –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –∏–ª–∏ '–∂' –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞.")
        return
    await state.update_data(gender=gender)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç):",
                         reply_markup=keyboard)
    await state.set_state(UserProfile.calorie_goal)


@router.message(UserProfile.calorie_goal)
async def process_calorie_goal(message: Message, state: FSMContext):
    user_data = await state.get_data()

    weight = user_data["weight"]
    height = user_data["height"]
    age = user_data["age"]
    activity = user_data["activity"]
    city = user_data["city"]
    gender = user_data["gender"]

    if message.text == "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏":
        if gender == "–º":
            calorie_goal = int(10 * weight + 6.25 * height - 5 * age + 5)
        else:
            calorie_goal = int(10 * weight + 6.25 * height - 5 * age - 161)
    else:
        if not message.text.isdigit() or int(message.text) <= 0:
            await message.answer("–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        calorie_goal = int(message.text)

    await state.update_data(calorie_goal=calorie_goal)
    user_id = message.from_user.id
    users[user_id] = user_data

    await state.clear()
    await message.answer(f"_–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!_\n\n"
                         f"*–í–µ—Å:* {weight} –∫–≥\n"
                         f"*–†–æ—Å—Ç:* {height} —Å–º\n"
                         f"*–í–æ–∑—Ä–∞—Å—Ç:* {age} {get_declension(age, ['–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç'])}\n"
                         f"*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {activity} –º–∏–Ω/–¥–µ–Ω—å\n"
                         f"*–ì–æ—Ä–æ–¥:* {city}\n"
                         f"*–ü–æ–ª:* {'–ú—É–∂—Å–∫–æ–π' if gender == '–º' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
                         f"*–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π:* {calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å",
                         parse_mode="Markdown",
                         reply_markup=ReplyKeyboardRemove())


@router.message(Command("log_water"))
async def log_water(message: Message):
    user_id = message.from_user.id
    logger.info(f'ID{user_id} -- Received: {message.text}')
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit() or int(args[1]) <= 0:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ)>. "
                             "–ü—Ä–∏–º–µ—Ä: /log_water 250")
        return

    volume = int(args[1])
    users[user_id]["logged_water"] = users[user_id].get("logged_water", 0) + volume

    user = users[user_id]
    weight = user["weight"]
    activity = user["activity"]
    city = user["city"]

    geo = get_geolocation(city, OPEN_WEATHER_API_KEY)
    if 'error' in geo:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É. –¶–µ–ª—å –ø–æ –≤–æ–¥–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.")
        temp = 20
    else:
        temp = get_current_temp(geo['lat'], geo['lon'], OPEN_WEATHER_API_KEY)
        if temp is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É. –¶–µ–ª—å –ø–æ –≤–æ–¥–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.")
            temp = 20

    water_goal = (user.get("additional_water_goal", 0) +
                  weight * 30 + (500 * (activity // 30)))
    if temp > 25:
        water_goal += 500
    if temp > 30:
        water_goal += 1000
    remaining = max(water_goal - user["logged_water"], 0)

    await message.answer(f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ: {volume} –º–ª –≤–æ–¥—ã.\n"
                         f"–ù–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª (—Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã {temp}¬∞C).\n"
                         f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: {remaining} –º–ª.")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f'ID{user_id} -- Received: {message.text}')
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>. "
                             "–ü—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω")
        return

    product_name = args[1]

    calories_per_100g = extract_average_number(generate_text(
        f'–°–∫–æ–ª—å–∫–æ –∫–∫–∞–ª –Ω–∞ 100–≥ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –ø—Ä–æ–¥—É–∫—Ç–µ: "{product_name}". '
        '–ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ. –û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º - –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π. '
        '–ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö —á–∏—Å–µ–ª –≤ –æ—Ç–≤–µ—Ç–µ.',
        YANDEX_API_KEY,
        YANDEX_CLOUD_CAT_ID,
        temperature=0
    ))
    if calories_per_100g is None:
        await message.answer("–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await state.update_data(food_name=product_name, food_calories=calories_per_100g)
    await message.answer(f"üçΩ _{product_name}_: ~{calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
                         f"–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏/–≤—ã–ø–∏–ª–∏?",
                         parse_mode="Markdown")
    await state.set_state("waiting_food_weight")


@router.message(StateFilter("waiting_food_weight"))
async def process_food_weight(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 150")
        return

    data = await state.get_data()
    grams = int(message.text)
    calories = (grams / 100) * data["food_calories"]

    users[user_id]["logged_calories"] = users[user_id].get("logged_calories", 0) + calories
    await state.clear()
    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {calories:.1f} –∫–∫–∞–ª - _{data['food_name']}_.",
                         parse_mode="Markdown")


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    user_id = message.from_user.id
    logger.info(f'ID{user_id} -- Received: {message.text}')
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) != 3 or not args[2].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>.\n"
                             "–ü—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30")
        return

    workout_type, minutes = args[1].lower(), int(args[2])
    workout_calories = {
        "–±–µ–≥": 10,
        "—Ö–æ–¥—å–±–∞": 5,
        "–≤–µ–ª–æ—Å–∏–ø–µ–¥": 8,
        "–ø–ª–∞–≤–∞–Ω–∏–µ": 12
    }

    if workout_type not in workout_calories:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: –±–µ–≥, —Ö–æ–¥—å–±–∞, –≤–µ–ª–æ—Å–∏–ø–µ–¥, –ø–ª–∞–≤–∞–Ω–∏–µ.")
        return

    calories_burned = workout_calories[workout_type] * minutes
    water_needed = (minutes // 30) * 200

    users[user_id]["burned_calories"] = users[user_id].get("burned_calories", 0) + calories_burned
    users[user_id]["additional_water_goal"] = users[user_id].get("additional_water_goal", 0) + water_needed

    await message.answer(f"üèãÔ∏è‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {minutes} –º–∏–Ω ‚Äî {calories_burned} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ.\n" +
                         (f"*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:* –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã." if water_needed > 0 else ""),
                         parse_mode="Markdown")


@router.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id
    logger.info(f'ID{user_id} -- Received: {message.text}')
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    user = users[user_id]
    weight = user["weight"]
    activity = user["activity"]
    city = user["city"]
    logged_water = user.get("logged_water", 0)
    logged_calories = user.get("logged_calories", 0)
    burned_calories = user.get("burned_calories", 0)

    geo = get_geolocation(city, OPEN_WEATHER_API_KEY)
    if 'error' in geo:
        temp = 20
    else:
        temp = get_current_temp(geo["lat"], geo["lon"], OPEN_WEATHER_API_KEY) or 20

    water_goal = (user.get("additional_water_goal", 0) +
                  weight * 30 + (500 * (activity // 30)))
    if temp > 25:
        water_goal += 500
    if temp > 30:
        water_goal += 1000
    remaining_water = max(water_goal - logged_water, 0)

    calorie_goal = user.get("calorie_goal", None)
    if calorie_goal is None:
        if user['gender'] == "–º":
            calorie_goal = int(10 * weight + 6.25 * user['height'] - 5 * user['age'] + 5)
        else:
            calorie_goal = int(10 * weight + 6.25 * user['height'] - 5 * user['age'] - 161)
    calorie_balance = logged_calories - burned_calories

    await message.answer(
        f"üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å**:\n\n"
        f"üíß **–í–æ–¥–∞:**\n"
        f"- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n\n"
        f"üî• **–ö–∞–ª–æ—Ä–∏–∏:**\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {calorie_balance} –∫–∫–∞–ª.",
        parse_mode="Markdown"
    )


@router.message(Command("progress_graphs"))
async def send_progress_graphs(message: Message):
    user_id = message.from_user.id
    logger.info(f'ID{user_id} -- Received: {message.text}')
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    graph_path = plot_progress(user_id)
    photo = FSInputFile(graph_path)
    await message.answer_photo(photo, caption="üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º")


async def main():
    await dispatcher.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
